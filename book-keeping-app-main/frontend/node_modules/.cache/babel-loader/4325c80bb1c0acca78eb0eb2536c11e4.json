{"ast":null,"code":"import{createStore,combineReducers,applyMiddleware}from'redux';import thunk from'redux-thunk';import{composeWithDevTools}from'redux-devtools-extension';import userReducer from'../reducers/userAuthReducer';import userProfileReducer from'../reducers/userProfileReducer';import userUpdateReducer from'../reducers/userUpdateReducer';import createdBookReducer from'../reducers/books/createdBookReducer';import booksListReducer from'../reducers/books/booksListReducer';import bookDetailReducer from'../reducers/books/bookDetailsReducer';import usersListReducer from'../reducers/usersListReducer';var middleware=[thunk];var reducer=combineReducers({userLogin:userReducer,userProfile:userProfileReducer,updatedUser:userUpdateReducer,bookCreated:createdBookReducer,booksList:booksListReducer,bookDetails:bookDetailReducer,usersList:usersListReducer});//store\n//Initial state\n//This is the initial state for all the reducers. NOTE the keys of the reducers above must be the same as the one you will pass as initialstate\n//The key must be the same and secondly look at the way the structure of the data in the store\n//Get the user in local storage\nvar userAuthFromStorage=localStorage.getItem('userAuthData')?JSON.parse(localStorage.getItem('userAuthData')):null;var initialState={userLogin:{userInfo:userAuthFromStorage}};var store=createStore(reducer,initialState,composeWithDevTools(applyMiddleware.apply(void 0,middleware)));export default store;","map":{"version":3,"sources":["C:/Users/HP/Desktop/book_keeping/book-keeping-app-main/frontend/src/redux/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","userReducer","userProfileReducer","userUpdateReducer","createdBookReducer","booksListReducer","bookDetailReducer","usersListReducer","middleware","reducer","userLogin","userProfile","updatedUser","bookCreated","booksList","bookDetails","usersList","userAuthFromStorage","localStorage","getItem","JSON","parse","initialState","userInfo","store"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,CAAuCC,eAAvC,KAA8D,OAA9D,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,OAASC,mBAAT,KAAoC,0BAApC,CACA,MAAOC,CAAAA,WAAP,KAAwB,6BAAxB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,gCAA/B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,+BAA9B,CACA,MAAOC,CAAAA,kBAAP,KAA+B,sCAA/B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oCAA7B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,sCAA9B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,8BAA7B,CAEA,GAAMC,CAAAA,UAAU,CAAG,CAACT,KAAD,CAAnB,CAEA,GAAMU,CAAAA,OAAO,CAAGZ,eAAe,CAAC,CAC9Ba,SAAS,CAAET,WADmB,CAE9BU,WAAW,CAAET,kBAFiB,CAG9BU,WAAW,CAAET,iBAHiB,CAI9BU,WAAW,CAAET,kBAJiB,CAK9BU,SAAS,CAAET,gBALmB,CAM9BU,WAAW,CAAET,iBANiB,CAO9BU,SAAS,CAAET,gBAPmB,CAAD,CAA/B,CAUA;AACA;AAEA;AACA;AAEA;AAEA,GAAMU,CAAAA,mBAAmB,CAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,EACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CADwB,CAExB,IAFJ,CAIA,GAAMG,CAAAA,YAAY,CAAG,CACnBZ,SAAS,CAAE,CAAEa,QAAQ,CAAEN,mBAAZ,CADQ,CAArB,CAIA,GAAMO,CAAAA,KAAK,CAAG5B,WAAW,CACvBa,OADuB,CAEvBa,YAFuB,CAGvBtB,mBAAmB,CAACF,eAAe,MAAf,QAAmBU,UAAnB,CAAD,CAHI,CAAzB,CAMA,cAAegB,CAAAA,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport userReducer from '../reducers/userAuthReducer';\r\nimport userProfileReducer from '../reducers/userProfileReducer';\r\nimport userUpdateReducer from '../reducers/userUpdateReducer';\r\nimport createdBookReducer from '../reducers/books/createdBookReducer';\r\nimport booksListReducer from '../reducers/books/booksListReducer';\r\nimport bookDetailReducer from '../reducers/books/bookDetailsReducer';\r\nimport usersListReducer from '../reducers/usersListReducer';\r\n\r\nconst middleware = [thunk];\r\n\r\nconst reducer = combineReducers({\r\n  userLogin: userReducer,\r\n  userProfile: userProfileReducer,\r\n  updatedUser: userUpdateReducer,\r\n  bookCreated: createdBookReducer,\r\n  booksList: booksListReducer,\r\n  bookDetails: bookDetailReducer,\r\n  usersList: usersListReducer,\r\n});\r\n\r\n//store\r\n//Initial state\r\n\r\n//This is the initial state for all the reducers. NOTE the keys of the reducers above must be the same as the one you will pass as initialstate\r\n//The key must be the same and secondly look at the way the structure of the data in the store\r\n\r\n//Get the user in local storage\r\n\r\nconst userAuthFromStorage = localStorage.getItem('userAuthData')\r\n  ? JSON.parse(localStorage.getItem('userAuthData'))\r\n  : null;\r\n\r\nconst initialState = {\r\n  userLogin: { userInfo: userAuthFromStorage },\r\n};\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}